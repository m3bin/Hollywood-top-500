#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Tue Dec 19 14:55:52 2023@author: A00315995# Program Name: PyTest.py# Purpose: This program performs unit testing of the statistics functions in main.py"""from main import calculate_mean, calculate_median, calculate_mode, calculate_range, calculate_interquartile, calculate_std_deviation, calculate_skewness, calculate_correlationimport pytestdef test_calculate_mean():    """    Test function for the calculate_mean function.    Returns    -------    None.    """    assert calculate_mean([11, 12, 13, 14, 15]) == 13    def test_calculate_median():    """    Test function for the calculate_median function.    Returns    -------    None.    """    data1 = [1, 2, 3, 4, 5]     # For odd number of values    data2 = [1, 2, 3, 4]        # For even number of values    assert calculate_median(data1) == 3    assert calculate_median(data2) == 2.5def test_calculate_mode():    """    Test function for the calculate_mode function.    Returns    -------    None.    """    data = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5]    assert calculate_mode(data) == 5def test_calculate_range():    """    Test function for the calculate_range function    Returns    -------    None.    """    assert calculate_range([1, 5, 9, 3, 7]) == 8     def test_calculate_interquartile():    """    Test function for the calculate_interquartile function    Returns    -------    None.    """    data1 = [1.1, 2, 3, 4, 5]    # For odd number of values    data2 = [1.1, 2, 3, 4]       # For even number of values    assert calculate_interquartile(data1) == pytest.approx(2.95,0.01)    assert calculate_interquartile(data2) == pytest.approx(1.95,0.01)     def test_calculate_std_deviation():    """    Test function for the calculate_std_deviation function    Returns    -------    None.    """    data = [1, 2, 3, 4, 5.5]    assert calculate_std_deviation(data) == pytest.approx(1.74,0.01)    def test_calculate_skewness():    """    Test function for the calculate_skewness function    Returns    -------    None.    """    data = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]    assert calculate_skewness(data,True) == pytest.approx(-0.95,0.01)    assert calculate_skewness(data,False) == pytest.approx(0.0,0.01)def test_calculate_correlation():    """    Test function for the calculate_correlation function    Returns    -------    None.    """    test_input1 = [10, 20, 30, 40, 50]    test_input2 = [5, 15, 25, 35, 45]    assert calculate_correlation(test_input1, test_input2) == pytest.approx(1.0,0.01)    if __name__ == "__main__":    pytest.main([__file__,"-v"])